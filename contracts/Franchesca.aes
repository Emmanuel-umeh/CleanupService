include "Pair.aes"
include "List.aes"

contract Franchesca =

    record person = {
        name: string,
        lastname: string,
        id: int}

    record work_day = {
        start: int,
        end: int}

    record payment = {
        date : int,
        worked_days: list(work_day),
        amount : int }

    record state = {
        employee : (address * person),
        duration : int,
        is_working : bool,
        work : option(work_day),
        base_salary : int,
        worked_days : list(work_day),
        payments : map(int, payment) }

    // API

    stateful entrypoint init(beneficiary: address,
                             name: string,
                             lastname: string,
                             id: int,
                             base_salary: int,
                             duration: int) =

        let person = {name = name, lastname = lastname, id = id}

        { employee = (beneficiary, person),
          base_salary = base_salary,
          duration = duration,
          is_working = false,
          work = None,
          worked_days = [],
          payments = {} }

    stateful entrypoint check_in() : unit =
        require(!state.is_working, "Franchesca already checked in")
        let work_day = { start = Chain.block_height, end = 0 }
        put(state{ is_working = true, work = Some(work_day) })

    stateful entrypoint check_out() : unit =
        require(state.is_working, "Mercedes didn't work today")
        let work_day =
          switch(state.work)
            None => abort("Mercedes didn't check in")
            Some(work_day) => work_day{ end = Chain.block_height }

        put(state{ worked_days = [work_day] ++ state.worked_days, is_working = false })

    stateful entrypoint pay() : unit =
        require(state.duration >= 0, "contract is done, no payments left")

        let duration = state.duration
        let salary = calculate_salary(state.base_salary)
        let total = total_worked_days() * salary
        let beneficiary = Pair.fst(state.employee)
        let payment = { date = Chain.block_height, amount = total, worked_days = state.worked_days }

        put(state{ payments[duration] = payment, duration = (state.duration - 1) })

        //Chain.spend(beneficiary, total)

    // Public functions to help contract testing

    entrypoint is_working() : bool =
        state.is_working

    entrypoint current_height() : int =
        Chain.block_height

    entrypoint work() =
        state.work

    entrypoint total_worked_days() : int =
        List.length(state.worked_days) - 1

    entrypoint total_paid() : int =
        let salary = calculate_salary(state.base_salary)
        total_worked_days() * salary

    entrypoint current_duration() : int =
        state.duration

    // Internal functions

    function calculate_salary (base_salary : int) =
        base_salary * 1285 / 1000
